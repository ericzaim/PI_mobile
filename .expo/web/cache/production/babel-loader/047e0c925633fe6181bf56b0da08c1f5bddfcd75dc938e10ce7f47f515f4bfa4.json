{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.router=void 0;exports.ImperativeApiEmitter=ImperativeApiEmitter;var react_1=require(\"react\");var routing_1=require(\"./global-state/routing\");exports.router={navigate:routing_1.navigate,push:routing_1.push,dismiss:routing_1.dismiss,dismissAll:routing_1.dismissAll,dismissTo:routing_1.dismissTo,canDismiss:routing_1.canDismiss,replace:routing_1.replace,back:function back(){return(0,routing_1.goBack)();},canGoBack:routing_1.canGoBack,reload:routing_1.reload,prefetch:routing_1.prefetch,setParams:routing_1.setParams};function ImperativeApiEmitter(){var events=(0,react_1.useSyncExternalStore)(routing_1.routingQueue.subscribe,routing_1.routingQueue.snapshot,routing_1.routingQueue.snapshot);(0,react_1.useEffect)(function(){routing_1.routingQueue.run();},[events]);return null;}","map":{"version":3,"names":["exports","ImperativeApiEmitter","react_1","require","routing_1","router","navigate","push","dismiss","dismissAll","dismissTo","canDismiss","replace","back","goBack","canGoBack","reload","prefetch","setParams","events","useSyncExternalStore","routingQueue","subscribe","snapshot","useEffect","run"],"sources":["C:\\Users\\ericz\\exprog\\PI_mobile\\node_modules\\expo-router\\src\\imperative-api.tsx"],"sourcesContent":["import { useEffect, useSyncExternalStore } from 'react';\n\nimport {\n  canDismiss,\n  canGoBack,\n  dismiss,\n  dismissAll,\n  dismissTo,\n  goBack,\n  navigate,\n  NavigationOptions,\n  prefetch,\n  push,\n  reload,\n  replace,\n  routingQueue,\n  setParams,\n} from './global-state/routing';\nimport { Href, Route, RouteInputParams } from './types';\n\n/**\n * Returns `router` object for imperative navigation API.\n *\n * @example\n *```tsx\n * import { router } from 'expo-router';\n * import { Text } from 'react-native';\n *\n * export default function Route() {\n *\n *  return (\n *   <Text onPress={() => router.push('/home')}>Go Home</Text>\n *  );\n *}\n * ```\n */\nexport type Router = {\n  /**\n   * Goes back in the navigation history.\n   */\n  back: () => void;\n  /**\n   * Navigates to a route in the navigator's history if it supports invoking the `back` function.\n   */\n  canGoBack: () => boolean;\n  /**\n   * Navigates to the provided [`href`](#href) using a push operation if possible.\n   */\n  push: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the provided [`href`](#href).\n   */\n  navigate: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to route without appending to the history. Can be used with\n   * [`useFocusEffect`](#usefocuseffecteffect-do_not_pass_a_second_prop)\n   * to redirect imperatively to a new screen.\n   *\n   * @see [Using `useRouter()` hook](/router/reference/redirects/) to redirect.\n   * */\n  replace: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the a stack lower than the current screen using the provided count if possible, otherwise 1.\n   *\n   * If the current screen is the only route, it will dismiss the entire stack.\n   */\n  dismiss: (count?: number) => void;\n  /**\n   * Dismisses screens until the provided href is reached. If the href is not found, it will instead replace the current screen with the provided `href`.\n   */\n  dismissTo: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Returns to the first screen in the closest stack. This is similar to\n   * [`popToTop`](https://reactnavigation.org/docs/stack-actions/#poptotop) stack action.\n   */\n  dismissAll: () => void;\n  /**\n   * Checks if it is possible to dismiss the current screen. Returns `true` if the\n   * router is within the stack with more than one screen in stack's history.\n   *\n   */\n  canDismiss: () => boolean;\n  /**\n   * Updates the current route's query params.\n   */\n  setParams: <T extends Route>(params: Partial<RouteInputParams<T>>) => void;\n  /**\n   * Reloads the currently mounted route in experimental server mode. This can be used to re-fetch data.\n   * @hidden\n   */\n  reload: () => void;\n  /**\n   * Prefetch a screen in the background before navigating to it\n   */\n  prefetch: (name: Href) => void;\n};\n\n/**\n * @hidden\n */\nexport const router: Router = {\n  navigate,\n  push,\n  dismiss,\n  dismissAll,\n  dismissTo,\n  canDismiss,\n  replace,\n  back: () => goBack(),\n  canGoBack,\n  reload,\n  prefetch,\n  setParams: setParams as Router['setParams'],\n};\n\nexport function ImperativeApiEmitter() {\n  const events = useSyncExternalStore(\n    routingQueue.subscribe,\n    routingQueue.snapshot,\n    routingQueue.snapshot\n  );\n  useEffect(() => {\n    routingQueue.run();\n  }, [events]);\n  return null;\n}\n"],"mappings":"4FAmHAA,OAAA,CAAAC,oBAAA,CAAAA,oBAAA,CAnHA,IAAAC,OAAA,CAAAC,OAAA,UAEA,IAAAC,SAAA,CAAAD,OAAA,2BAkGaH,OAAA,CAAAK,MAAM,CAAW,CAC5BC,QAAQ,CAARF,SAAA,CAAAE,QAAQ,CACRC,IAAI,CAAJH,SAAA,CAAAG,IAAI,CACJC,OAAO,CAAPJ,SAAA,CAAAI,OAAO,CACPC,UAAU,CAAVL,SAAA,CAAAK,UAAU,CACVC,SAAS,CAATN,SAAA,CAAAM,SAAS,CACTC,UAAU,CAAVP,SAAA,CAAAO,UAAU,CACVC,OAAO,CAAPR,SAAA,CAAAQ,OAAO,CACPC,IAAI,CAAE,QAAN,CAAAA,IAAIA,CAAA,QAAQ,GAAAT,SAAA,CAAAU,MAAM,GAAE,GACpBC,SAAS,CAATX,SAAA,CAAAW,SAAS,CACTC,MAAM,CAANZ,SAAA,CAAAY,MAAM,CACNC,QAAQ,CAARb,SAAA,CAAAa,QAAQ,CACRC,SAAS,CAAEd,SAAA,CAAAc,S,CACZ,CAED,QAAgB,CAAAjB,oBAAoBA,CAAA,EAClC,GAAM,CAAAkB,MAAM,CAAG,GAAAjB,OAAA,CAAAkB,oBAAoB,EACjChB,SAAA,CAAAiB,YAAY,CAACC,SAAS,CACtBlB,SAAA,CAAAiB,YAAY,CAACE,QAAQ,CACrBnB,SAAA,CAAAiB,YAAY,CAACE,QAAQ,CACtB,CACD,GAAArB,OAAA,CAAAsB,SAAS,EAAC,UAAK,CACbpB,SAAA,CAAAiB,YAAY,CAACI,GAAG,EAAE,CACpB,CAAC,CAAE,CAACN,MAAM,CAAC,CAAC,CACZ,MAAO,KAAI,CACb","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}