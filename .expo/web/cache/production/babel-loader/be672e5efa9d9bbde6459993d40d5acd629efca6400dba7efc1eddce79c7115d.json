{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getNavigationConfig=getNavigationConfig;exports.getLinkingConfig=getLinkingConfig;var native_1=require(\"@react-navigation/native\");var expo_modules_core_1=require(\"expo-modules-core\");var constants_1=require(\"./constants\");var getReactNavigationConfig_1=require(\"./getReactNavigationConfig\");var getRoutesRedirects_1=require(\"./getRoutesRedirects\");var linking_1=require(\"./link/linking\");function getNavigationConfig(routes){var metaOnly=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return{screens:_defineProperty({},constants_1.INTERNAL_SLOT_NAME,_objectSpread({path:''},(0,getReactNavigationConfig_1.getReactNavigationConfig)(routes,metaOnly)))};}function getLinkingConfig(routes,context,getRouteInfo){var _ref=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{},_ref$metaOnly=_ref.metaOnly,metaOnly=_ref$metaOnly===void 0?true:_ref$metaOnly,serverUrl=_ref.serverUrl,redirects=_ref.redirects;var hasCachedInitialUrl=false;var initialUrl;var nativeLinkingKey=context.keys().find(function(key){return key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/);});var nativeLinking=nativeLinkingKey?context(nativeLinkingKey):undefined;var config=getNavigationConfig(routes,metaOnly);return{prefixes:[],config:config,getInitialURL:function getInitialURL(){if(!hasCachedInitialUrl){if(expo_modules_core_1.Platform.OS==='web'){initialUrl=serverUrl!=null?serverUrl:(0,linking_1.getInitialURL)();}else{initialUrl=serverUrl!=null?serverUrl:(0,linking_1.getInitialURL)();if(typeof initialUrl==='string'){initialUrl=(0,getRoutesRedirects_1.applyRedirects)(initialUrl,redirects);if(initialUrl&&typeof(nativeLinking==null?void 0:nativeLinking.redirectSystemPath)==='function'){initialUrl=nativeLinking.redirectSystemPath({path:initialUrl,initial:true});}}else if(initialUrl){initialUrl=initialUrl.then(function(url){url=(0,getRoutesRedirects_1.applyRedirects)(url,redirects);if(url&&typeof(nativeLinking==null?void 0:nativeLinking.redirectSystemPath)==='function'){return nativeLinking.redirectSystemPath({path:url,initial:true});}return url;});}}hasCachedInitialUrl=true;}return initialUrl;},subscribe:(0,linking_1.subscribe)(nativeLinking,redirects),getStateFromPath:function getStateFromPath(path,options){return(0,linking_1.getStateFromPath)(path,options,getRouteInfo().segments);},getPathFromState:function getPathFromState(state,options){var _ref2,_ref3,_config$screens;return(_ref2=(0,linking_1.getPathFromState)(state,_objectSpread(_objectSpread(_objectSpread({},config),options),{},{screens:(_ref3=(_config$screens=config.screens)!=null?_config$screens:options==null?void 0:options.screens)!=null?_ref3:{}})))!=null?_ref2:'/';},getActionFromState:native_1.getActionFromState};}","map":{"version":3,"names":["exports","getNavigationConfig","getLinkingConfig","native_1","require","expo_modules_core_1","constants_1","getReactNavigationConfig_1","getRoutesRedirects_1","linking_1","routes","metaOnly","arguments","length","undefined","screens","_defineProperty","INTERNAL_SLOT_NAME","_objectSpread","path","getReactNavigationConfig","context","getRouteInfo","_ref","_ref$metaOnly","serverUrl","redirects","hasCachedInitialUrl","initialUrl","nativeLinkingKey","keys","find","key","match","nativeLinking","config","prefixes","getInitialURL","Platform","OS","applyRedirects","redirectSystemPath","initial","then","url","subscribe","getStateFromPath","options","segments","getPathFromState","state","_ref2","_ref3","_config$screens","getActionFromState"],"sources":["C:\\Users\\ericz\\exprog\\PI_mobile\\node_modules\\expo-router\\src\\getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\n\nimport { RouteNode } from './Route';\nimport { INTERNAL_SLOT_NAME } from './constants';\nimport { Options, State } from './fork/getPathFromState';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport { applyRedirects } from './getRoutesRedirects';\nimport { UrlObject } from './global-state/routeInfo';\nimport type { StoreRedirects } from './global-state/router-store';\nimport { getInitialURL, getPathFromState, getStateFromPath, subscribe } from './link/linking';\nimport { NativeIntent, RequireContext } from './types';\n\nexport function getNavigationConfig(routes: RouteNode, metaOnly: boolean = true) {\n  return {\n    screens: {\n      [INTERNAL_SLOT_NAME]: {\n        path: '',\n        ...getReactNavigationConfig(routes, metaOnly),\n      },\n    },\n  };\n}\n\nexport type ExpoLinkingOptions<T extends object = Record<string, unknown>> = LinkingOptions<T> & {\n  getPathFromState: typeof getPathFromState;\n  getStateFromPath: typeof getStateFromPath;\n};\n\nexport type LinkingConfigOptions = {\n  metaOnly?: boolean;\n  serverUrl?: string;\n  getInitialURL?: typeof getInitialURL;\n  redirects?: StoreRedirects[];\n};\n\nexport function getLinkingConfig(\n  routes: RouteNode,\n  context: RequireContext,\n  getRouteInfo: () => UrlObject,\n  { metaOnly = true, serverUrl, redirects }: LinkingConfigOptions = {}\n): ExpoLinkingOptions {\n  // Returning `undefined` / `null from `getInitialURL` are valid values, so we need to track if it's been called.\n  let hasCachedInitialUrl = false;\n  let initialUrl: ReturnType<typeof getInitialURL> | undefined;\n\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  const config = getNavigationConfig(routes, metaOnly);\n\n  return {\n    prefixes: [],\n    config,\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL() {\n      // Expo Router calls `getInitialURL` twice, which may confuse the user if they provide a custom `getInitialURL`.\n      // Therefor we memoize the result.\n      if (!hasCachedInitialUrl) {\n        if (Platform.OS === 'web') {\n          initialUrl = serverUrl ?? getInitialURL();\n        } else {\n          initialUrl = serverUrl ?? getInitialURL();\n\n          if (typeof initialUrl === 'string') {\n            initialUrl = applyRedirects(initialUrl, redirects);\n            if (initialUrl && typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({ path: initialUrl, initial: true });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then((url) => {\n              url = applyRedirects(url, redirects);\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({ path: url, initial: true });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: subscribe(nativeLinking, redirects),\n    getStateFromPath: <ParamList extends object>(path: string, options?: Options<ParamList>) => {\n      return getStateFromPath(path, options, getRouteInfo().segments);\n    },\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          ...config,\n          ...options,\n          screens: config.screens ?? options?.screens ?? {},\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}