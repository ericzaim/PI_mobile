{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.populateParams=populateParams;exports.safelyDecodeURIComponent=safelyDecodeURIComponent;exports.getUrlWithReactNavigationConcessions=getUrlWithReactNavigationConcessions;exports.createConfig=createConfig;exports.assertScreens=assertScreens;exports.configRegExp=configRegExp;exports.isDynamicPart=isDynamicPart;exports.replacePart=replacePart;exports.getParamValue=getParamValue;exports.handleUrlParams=handleUrlParams;exports.spreadParamsAcrossAllStates=spreadParamsAcrossAllStates;exports.stripBaseUrl=stripBaseUrl;exports.matchForEmptyPath=matchForEmptyPath;exports.appendIsInitial=appendIsInitial;exports.getRouteConfigSorter=getRouteConfigSorter;exports.parseQueryParams=parseQueryParams;exports.cleanPath=cleanPath;exports.routePatternToRegex=routePatternToRegex;var escape_string_regexp_1=__importDefault(require(\"escape-string-regexp\"));var matchers_1=require(\"../matchers\");function populateParams(routes,params){if(!routes||!params||Object.keys(params).length===0)return;for(var route of routes){Object.assign(route,{params:params});}return routes;}function safelyDecodeURIComponent(str){try{return decodeURIComponent(str);}catch(_unused){return str;}}function getUrlWithReactNavigationConcessions(path){var baseUrl=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";var parsed;try{parsed=new URL(path,'https://phony.example');}catch(_unused2){return{path:path,cleanUrl:'',nonstandardPathname:'',url:new URL('https://phony.example')};}var pathname=parsed.pathname;var withoutBaseUrl=stripBaseUrl(pathname,baseUrl);var pathWithoutGroups=(0,matchers_1.stripGroupSegmentsFromPath)(stripBaseUrl(path,baseUrl));return{path:path,nonstandardPathname:withoutBaseUrl.replace(/^\\/+/g,'').replace(/\\/+$/g,'')+'/',url:parsed,pathWithoutGroups:pathWithoutGroups};}function createConfig(screen,pattern,routeNames){var _Object$keys;var config=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var parts=[];var isDynamic=false;var isIndex=screen==='index'||screen.endsWith('/index');for(var part of pattern.split('/')){if(part){isDynamic||=part.startsWith(':')||part.startsWith('*')||part.includes('*not-found');if(!(0,matchers_1.matchGroupName)(part)){parts.push(part);}}}var hasChildren=config.screens?!!((_Object$keys=Object.keys(config.screens))!=null&&_Object$keys.length):false;var type=hasChildren?'layout':isDynamic?'dynamic':'static';if(isIndex){parts.push('index');}return{type:type,isIndex:isIndex,hasChildren:hasChildren,parts:parts,userReadableName:[].concat(_toConsumableArray(routeNames.slice(0,-1)),[config.path||screen]).join('/'),expandedRouteNames:routeNames.slice(1).flatMap(function(name){return name.split('/');})};}function assertScreens(options){if(!(options!=null&&options.screens)){throw Error(\"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\");}}function configRegExp(config){return config.pattern?new RegExp(`^(${config.pattern.split('/').map(formatRegexPattern).join('')})$`):undefined;}function isDynamicPart(p){return p.length>1&&(p.startsWith(':')||p.startsWith('*'));}function replacePart(p){return p.replace(/^[:*]/,'').replace(/\\?$/,'');}function getParamValue(p,value){if(p.startsWith('*')){var values=value.split('/').filter(function(v){return v!=='';});return values.length===0&&p.endsWith('?')?undefined:values;}else{return value;}}function formatRegexPattern(it){it=it.replace(' ','%20');if(it.startsWith(':')){return`(([^/]+\\\\/)${it.endsWith('?')?'?':''})`;}else if(it.startsWith('*')){return`((.*\\\\/)${it.endsWith('?')?'?':''})`;}if((0,matchers_1.matchGroupName)(it)!=null){return`(?:${(0,escape_string_regexp_1.default)(it)}\\\\/)?`;}return(0,escape_string_regexp_1.default)(it)+`\\\\/`;}function handleUrlParams(route,params){if(params){route.params=Object.assign(Object.create(null),route.params);for(var _ref of Object.entries(params)){var _route$params,_route$params2;var _ref2=_slicedToArray(_ref,2);var name=_ref2[0];var value=_ref2[1];if((_route$params=route.params)!=null&&_route$params[name]){if(\"production\"!=='production'){console.warn(`Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`);}}if(!((_route$params2=route.params)!=null&&_route$params2[name])){route.params[name]=value;continue;}}if(Object.keys(route.params).length===0){delete route.params;}}}function spreadParamsAcrossAllStates(state,params){while(state){var route=state.routes[0];route.params=Object.assign({},route.params,params);}}function stripBaseUrl(path){var baseUrl=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";if(\"production\"!=='development'){if(baseUrl){return path.replace(/^\\/+/g,'/').replace(new RegExp(`^\\\\/?${(0,escape_string_regexp_1.default)(baseUrl)}`,'g'),'');}}return path;}function matchForEmptyPath(configs){var _ref3,_leafNodes$find;var leafNodes=configs.filter(function(config){return!config.hasChildren;}).map(function(value){return _objectSpread(_objectSpread({},value),{},{path:(0,matchers_1.stripGroupSegmentsFromPath)(value.path)});});var match=(_ref3=(_leafNodes$find=leafNodes.find(function(config){return(config.path===''&&(!config.regex||config.regex.test('')));}))!=null?_leafNodes$find:leafNodes.find(function(config){return(config.path.startsWith(':')&&config.regex.test(''));}))!=null?_ref3:leafNodes.find(function(config){return config.path.startsWith('*')&&config.regex.test('/');});return match;}function appendIsInitial(initialRoutes){var resolvedInitialPatterns=initialRoutes.map(function(route){return joinPaths.apply(void 0,_toConsumableArray(route.parentScreens).concat([route.initialRouteName]));});return function(config){config.isInitial=resolvedInitialPatterns.includes(config.routeNames.join('/'));return config;};}var joinPaths=function joinPaths(){var _ref4;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref4=[]).concat.apply(_ref4,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};function getRouteConfigSorter(){var previousSegments=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return function sortConfigs(a,b){if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)&&!b.isIndex){return-1;}if(b.pattern.startsWith(a.pattern)&&!a.isIndex){return 1;}if(a.type==='static'&&b.type!=='static'){return-1;}else if(a.type!=='static'&&b.type==='static'){return 1;}var similarToPreviousA=previousSegments.filter(function(value,index){return value===a.expandedRouteNames[index]&&value.startsWith('(')&&value.endsWith(')');});var similarToPreviousB=previousSegments.filter(function(value,index){return value===b.expandedRouteNames[index]&&value.startsWith('(')&&value.endsWith(')');});if((similarToPreviousA.length>0||similarToPreviousB.length>0)&&similarToPreviousA.length!==similarToPreviousB.length){return similarToPreviousB.length-similarToPreviousA.length;}for(var i=0;i<Math.max(a.parts.length,b.parts.length);i++){if(a.parts[i]==null){return 1;}if(b.parts[i]==null){return-1;}var aWildCard=a.parts[i].startsWith('*');var bWildCard=b.parts[i].startsWith('*');if(aWildCard&&bWildCard){var aNotFound=a.parts[i].match(/^[*]not-found$/);var bNotFound=b.parts[i].match(/^[*]not-found$/);if(aNotFound&&bNotFound){continue;}else if(aNotFound){return 1;}else if(bNotFound){return-1;}continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}var aSlug=a.parts[i].startsWith(':');var bSlug=b.parts[i].startsWith(':');if(aSlug&&bSlug){var _aNotFound=a.parts[i].match(/^[*]not-found$/);var _bNotFound=b.parts[i].match(/^[*]not-found$/);if(_aNotFound&&_bNotFound){continue;}else if(_aNotFound){return 1;}else if(_bNotFound){return-1;}continue;}if(aSlug){return 1;}if(bSlug){return-1;}}if(a.isInitial&&!b.isInitial){return-1;}else if(!a.isInitial&&b.isInitial){return 1;}return b.parts.length-a.parts.length;};}function parseQueryParams(path,route,parseConfig,hash){var searchParams=new URL(path,'https://phony.example').searchParams;var params=Object.create(null);if(hash){params['#']=hash.slice(1);}var _loop=function _loop(name){var _route$params3;if((_route$params3=route.params)!=null&&_route$params3[name]){if(\"production\"!=='production'){console.warn(`Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`);}}else{var values=parseConfig!=null&&parseConfig.hasOwnProperty(name)?searchParams.getAll(name).map(function(value){return parseConfig[name](value);}):searchParams.getAll(name);params[name]=values.length===1?values[0]:values;}};for(var name of searchParams.keys()){_loop(name);}return Object.keys(params).length?params:undefined;}function cleanPath(path){path=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');return path.endsWith('/')?path:`${path}/`;}function routePatternToRegex(pattern){return new RegExp(`^(${pattern.split('/').map(function(it){if(it.startsWith(':')){return`(([^/]+\\\\/)${it.endsWith('?')?'?':''})`;}return`${it==='*'?'.*':(0,escape_string_regexp_1.default)(it)}\\\\/`;}).join('')})`);}","map":{"version":3,"names":["exports","populateParams","safelyDecodeURIComponent","getUrlWithReactNavigationConcessions","createConfig","assertScreens","configRegExp","isDynamicPart","replacePart","getParamValue","handleUrlParams","spreadParamsAcrossAllStates","stripBaseUrl","matchForEmptyPath","appendIsInitial","getRouteConfigSorter","parseQueryParams","cleanPath","routePatternToRegex","escape_string_regexp_1","__importDefault","require","matchers_1","routes","params","Object","keys","length","route","assign","str","decodeURIComponent","_unused","path","baseUrl","arguments","undefined","parsed","URL","_unused2","cleanUrl","nonstandardPathname","url","pathname","withoutBaseUrl","pathWithoutGroups","stripGroupSegmentsFromPath","replace","screen","pattern","routeNames","_Object$keys","config","parts","isDynamic","isIndex","endsWith","part","split","startsWith","includes","matchGroupName","push","hasChildren","screens","type","userReadableName","concat","_toConsumableArray","slice","join","expandedRouteNames","flatMap","name","options","Error","RegExp","map","formatRegexPattern","p","value","values","filter","v","it","default","create","_ref","entries","_route$params","_route$params2","_ref2","_slicedToArray","console","warn","state","configs","_ref3","_leafNodes$find","leafNodes","_objectSpread","match","find","regex","test","initialRoutes","resolvedInitialPatterns","joinPaths","apply","parentScreens","initialRouteName","isInitial","_ref4","_len","paths","Array","_key","Boolean","previousSegments","sortConfigs","a","b","localeCompare","similarToPreviousA","index","similarToPreviousB","i","Math","max","aWildCard","bWildCard","aNotFound","bNotFound","aSlug","bSlug","parseConfig","hash","searchParams","_loop","_route$params3","hasOwnProperty","getAll"],"sources":["C:\\Users\\ericz\\exprog\\PI_mobile\\node_modules\\expo-router\\src\\fork\\getStateFromPath-forks.ts"],"sourcesContent":["import { InitialState } from '@react-navigation/native';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport type { InitialRouteConfig, Options, ParsedRoute, RouteConfig } from './getStateFromPath';\nimport { matchGroupName, stripGroupSegmentsFromPath } from '../matchers';\n\nexport type ExpoOptions = {\n  previousSegments?: string[];\n};\n\nexport type ExpoRouteConfig = {\n  type: 'static' | 'dynamic' | 'layout';\n  userReadableName: string;\n  isIndex: boolean;\n  isInitial?: boolean;\n  hasChildren: boolean;\n  expandedRouteNames: string[];\n  parts: string[];\n};\n\n/**\n * In Expo Router, the params are available at all levels of the routing config\n * @param routes\n * @returns\n */\nexport function populateParams(routes?: ParsedRoute[], params?: Record<string, any>) {\n  if (!routes || !params || Object.keys(params).length === 0) return;\n\n  for (const route of routes) {\n    Object.assign(route, { params });\n  }\n\n  return routes;\n}\n\nexport function safelyDecodeURIComponent(str: string) {\n  try {\n    return decodeURIComponent(str);\n  } catch {\n    return str;\n  }\n}\n\nexport function getUrlWithReactNavigationConcessions(\n  path: string,\n  baseUrl: string | undefined = process.env.EXPO_BASE_URL\n) {\n  let parsed: URL;\n  try {\n    parsed = new URL(path, 'https://phony.example');\n  } catch {\n    // Do nothing with invalid URLs.\n    return {\n      path,\n      cleanUrl: '',\n      nonstandardPathname: '',\n      url: new URL('https://phony.example'),\n    };\n  }\n\n  const pathname = parsed.pathname;\n  const withoutBaseUrl = stripBaseUrl(pathname, baseUrl);\n  const pathWithoutGroups = stripGroupSegmentsFromPath(stripBaseUrl(path, baseUrl));\n\n  // Make sure there is a trailing slash\n  return {\n    // The slashes are at the end, not the beginning\n    path,\n    nonstandardPathname: withoutBaseUrl.replace(/^\\/+/g, '').replace(/\\/+$/g, '') + '/',\n    url: parsed,\n    pathWithoutGroups,\n  };\n}\n\nexport function createConfig(\n  screen: string,\n  pattern: string,\n  routeNames: string[],\n  config: Record<string, any> = {}\n): Omit<ExpoRouteConfig, 'isInitial'> {\n  const parts: string[] = [];\n  let isDynamic = false;\n  const isIndex = screen === 'index' || screen.endsWith('/index');\n\n  for (const part of pattern.split('/')) {\n    if (part) {\n      // If any part is dynamic, then the route is dynamic\n      isDynamic ||= part.startsWith(':') || part.startsWith('*') || part.includes('*not-found');\n\n      if (!matchGroupName(part)) {\n        parts.push(part);\n      }\n    }\n  }\n\n  const hasChildren = config.screens ? !!Object.keys(config.screens)?.length : false;\n  const type = hasChildren ? 'layout' : isDynamic ? 'dynamic' : 'static';\n\n  if (isIndex) {\n    parts.push('index');\n  }\n\n  return {\n    type,\n    isIndex,\n    hasChildren,\n    parts,\n    userReadableName: [...routeNames.slice(0, -1), config.path || screen].join('/'),\n    // Don't include the __root route name\n    expandedRouteNames: routeNames.slice(1).flatMap((name) => {\n      return name.split('/');\n    }),\n  };\n}\n\nexport function assertScreens(options?: Options<object>): asserts options is Options<object> {\n  if (!options?.screens) {\n    throw Error(\"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\");\n  }\n}\n\nexport function configRegExp(config: RouteConfig) {\n  return config.pattern\n    ? new RegExp(`^(${config.pattern.split('/').map(formatRegexPattern).join('')})$`)\n    : undefined;\n}\n\nexport function isDynamicPart(p: string) {\n  return p.length > 1 && (p.startsWith(':') || p.startsWith('*'));\n}\n\nexport function replacePart(p: string) {\n  return p.replace(/^[:*]/, '').replace(/\\?$/, '');\n}\n\nexport function getParamValue(p: string, value: string) {\n  if (p.startsWith('*')) {\n    const values = value.split('/').filter((v) => v !== '');\n    return values.length === 0 && p.endsWith('?') ? undefined : values;\n  } else {\n    return value;\n  }\n}\n\nfunction formatRegexPattern(it: string): string {\n  // Allow spaces in file path names.\n  it = it.replace(' ', '%20');\n\n  if (it.startsWith(':')) {\n    // TODO: Remove unused match group\n    return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n  } else if (it.startsWith('*')) {\n    return `((.*\\\\/)${it.endsWith('?') ? '?' : ''})`;\n  }\n\n  // Strip groups from the matcher\n  if (matchGroupName(it) != null) {\n    // Groups are optional segments\n    // this enables us to match `/bar` and `/(foo)/bar` for the same route\n    // NOTE(EvanBacon): Ignore this match in the regex to avoid capturing the group\n    return `(?:${escape(it)}\\\\/)?`;\n  }\n\n  return escape(it) + `\\\\/`;\n}\n\nexport function handleUrlParams(route: ParsedRoute, params?: queryString.ParsedQuery) {\n  if (params) {\n    route.params = Object.assign(Object.create(null), route.params) as Record<string, any>;\n    for (const [name, value] of Object.entries(params)) {\n      if (route.params?.[name]) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`\n          );\n        }\n      }\n\n      if (!route.params?.[name]) {\n        route.params[name] = value;\n        continue;\n      }\n    }\n\n    if (Object.keys(route.params).length === 0) {\n      delete route.params;\n    }\n  }\n}\n\nexport function spreadParamsAcrossAllStates(state: InitialState, params?: Record<string, any>) {\n  while (state) {\n    const route = state.routes[0];\n    (route as any).params = Object.assign({}, route.params, params);\n  }\n}\n\nexport function stripBaseUrl(\n  path: string,\n  baseUrl: string | undefined = process.env.EXPO_BASE_URL\n) {\n  if (process.env.NODE_ENV !== 'development') {\n    if (baseUrl) {\n      return path.replace(/^\\/+/g, '/').replace(new RegExp(`^\\\\/?${escape(baseUrl)}`, 'g'), '');\n    }\n  }\n  return path;\n}\n\nexport function matchForEmptyPath(configs: RouteConfig[]) {\n  // We need to add special handling of empty path so navigation to empty path also works\n  // When handling empty path, we should only look at the root level config\n\n  // NOTE(EvanBacon): We only care about matching leaf nodes.\n  const leafNodes = configs\n    .filter((config) => !config.hasChildren)\n    .map((value) => {\n      return {\n        ...value,\n        // Collapse all levels of group segments before testing.\n        // This enables `app/(one)/(two)/index.js` to be matched.\n        path: stripGroupSegmentsFromPath(value.path),\n      };\n    });\n\n  const match =\n    leafNodes.find(\n      (config) =>\n        // NOTE(EvanBacon): Test leaf node index routes that either don't have a regex or match an empty string.\n        config.path === '' && (!config.regex || config.regex.test(''))\n    ) ??\n    leafNodes.find(\n      (config) =>\n        // NOTE(EvanBacon): Test leaf node dynamic routes that match an empty string.\n        config.path.startsWith(':') && config.regex!.test('')\n    ) ??\n    // NOTE(EvanBacon): Test leaf node deep dynamic routes that match a slash.\n    // This should be done last to enable dynamic routes having a higher priority.\n    leafNodes.find((config) => config.path.startsWith('*') && config.regex!.test('/'));\n\n  return match;\n}\n\nexport function appendIsInitial(initialRoutes: InitialRouteConfig[]) {\n  const resolvedInitialPatterns = initialRoutes.map((route) =>\n    joinPaths(...route.parentScreens, route.initialRouteName)\n  );\n\n  return function (config: RouteConfig) {\n    // TODO(EvanBacon): Probably a safer way to do this\n    // Mark initial routes to give them potential priority over other routes that match.\n    config.isInitial = resolvedInitialPatterns.includes(config.routeNames.join('/'));\n    return config;\n  };\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nexport function getRouteConfigSorter(previousSegments: string[] = []) {\n  return function sortConfigs(a: RouteConfig, b: RouteConfig) {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    /*\n     * If one of the patterns starts with the other, it is earlier in the config sorting.\n     * However, configs are a mix of route configs and layout configs\n     * e.g There will be a config for `/(group)`, but maybe there isn't a `/(group)/index.tsx`\n     *\n     * This is because you can navigate to a directory and its navigator will determine the route\n     * These routes should be later in the config sorting, as their patterns are very open\n     * and will prevent routes from being matched\n     *\n     * Therefore before we compare segment parts, we force these layout configs later in the sorting\n     *\n     * NOTE(marklawlor): Is this a feature we want? I'm unsure if this is a gimmick or a feature.\n     */\n    if (a.pattern.startsWith(b.pattern) && !b.isIndex) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern) && !a.isIndex) {\n      return 1;\n    }\n\n    /*\n     * Static routes should always be higher than dynamic and layout routes.\n     */\n    if (a.type === 'static' && b.type !== 'static') {\n      return -1;\n    } else if (a.type !== 'static' && b.type === 'static') {\n      return 1;\n    }\n\n    /*\n     * If both are static/dynamic or a layout file, then we check group similarity\n     */\n    const similarToPreviousA = previousSegments.filter((value, index) => {\n      return value === a.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n\n    const similarToPreviousB = previousSegments.filter((value, index) => {\n      return value === b.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n\n    if (\n      (similarToPreviousA.length > 0 || similarToPreviousB.length > 0) &&\n      similarToPreviousA.length !== similarToPreviousB.length\n    ) {\n      // One matches more than the other, so pick the one that matches more\n      return similarToPreviousB.length - similarToPreviousA.length;\n    }\n\n    /*\n     * If there is not difference in similarity, then each non-group segment is compared against each other\n     */\n    for (let i = 0; i < Math.max(a.parts.length, b.parts.length); i++) {\n      // if b is longer, b get higher priority\n      if (a.parts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (b.parts[i] == null) {\n        return -1;\n      }\n\n      const aWildCard = a.parts[i].startsWith('*');\n      const bWildCard = b.parts[i].startsWith('*');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        const aNotFound = a.parts[i].match(/^[*]not-found$/);\n        const bNotFound = b.parts[i].match(/^[*]not-found$/);\n\n        if (aNotFound && bNotFound) {\n          continue;\n        } else if (aNotFound) {\n          return 1;\n        } else if (bNotFound) {\n          return -1;\n        }\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n\n      const aSlug = a.parts[i].startsWith(':');\n      const bSlug = b.parts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aSlug && bSlug) {\n        const aNotFound = a.parts[i].match(/^[*]not-found$/);\n        const bNotFound = b.parts[i].match(/^[*]not-found$/);\n\n        if (aNotFound && bNotFound) {\n          continue;\n        } else if (aNotFound) {\n          return 1;\n        } else if (bNotFound) {\n          return -1;\n        }\n\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aSlug) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bSlug) {\n        return -1;\n      }\n    }\n\n    /*\n     * Both configs are identical in specificity and segments count/type\n     * Try and sort by initial instead.\n     *\n     * TODO: We don't differentiate between the default initialRoute and group specific default routes\n     *\n     * const unstable_settings = {\n     *   \"group\": {\n     *     initialRouteName: \"article\"\n     *  }\n     * }\n     *\n     * \"article\" will be ranked higher because its an initialRoute for a group - even if not your not currently in\n     * that group. The current work around is to ways provide initialRouteName for all groups\n     */\n    if (a.isInitial && !b.isInitial) {\n      return -1;\n    } else if (!a.isInitial && b.isInitial) {\n      return 1;\n    }\n\n    return b.parts.length - a.parts.length;\n  };\n}\n\nexport function parseQueryParams(\n  path: string,\n  route: ParsedRoute,\n  parseConfig?: Record<string, (value: string) => any>,\n  hash?: string\n) {\n  const searchParams = new URL(path, 'https://phony.example').searchParams;\n  const params: Record<string, string | string[]> = Object.create(null);\n\n  if (hash) {\n    params['#'] = hash.slice(1);\n  }\n\n  for (const name of searchParams.keys()) {\n    if (route.params?.[name]) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          `Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`\n        );\n      }\n    } else {\n      const values = parseConfig?.hasOwnProperty(name)\n        ? searchParams.getAll(name).map((value) => parseConfig[name](value))\n        : searchParams.getAll(name);\n\n      // searchParams.getAll returns an array.\n      // if we only have a single value, and its not an array param, we need to extract the value\n      params[name] = values.length === 1 ? values[0] : values;\n    }\n  }\n\n  return Object.keys(params).length ? params : undefined;\n}\n\nexport function cleanPath(path: string) {\n  path = path\n    // let remaining = path\n    // END FORK\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  return path.endsWith('/') ? path : `${path}/`;\n}\n\nexport function routePatternToRegex(pattern: string) {\n  return new RegExp(\n    `^(${pattern\n      .split('/')\n      .map((it) => {\n        if (it.startsWith(':')) {\n          return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n        }\n\n        return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n      })\n      .join('')})`\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}